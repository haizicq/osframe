<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
    <!-- 扫描com.smart.service包下所有标注@Service的服务组件 -->
    <context:component-scan base-package="com.os.osframe.frame.util"/>
    <context:component-scan base-package="com.os.osframe.**.dao"/>
    <context:component-scan base-package="com.os.osframe.**.service"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <bean id="propertyConfigurer"
          class="com.os.osframe.frame.loader.PropertyConfigurerLoader">
        <!--<property name="location" value="classpath:dataSource.properties"/>-->
        <property name="locations">
            <list>
                <value>classpath:dataSource.properties</value>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>
    <bean id="enumsConfigurer"
          class="com.os.osframe.frame.common.EnumsConfigurerLoader">
        <property name="locations">
            <list>
                <value>classpath*:com/os/osframe/**/enums.properties</value>
            </list>
        </property>
    </bean>
    <!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close"
          p:driverClassName="${hibernate.driverClassName}"
          p:url="${hibernate.url}"
          p:username="${hibernate.username}"
          p:password="${hibernate.password}"/>-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${hibernate.driverClassName}" />
        <property name="url" value="${hibernate.url}" />
        <property name="username" value="${hibernate.username}" />
        <property name="password" value="${hibernate.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${hibernate.filters}" />
    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.os.osframe"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--<prop key="hibernate.cache.provider_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>-->
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.maxActive">1000</prop>
                <prop key="hibernate.maxIdle">20</prop>
                <!--<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>-->
                <prop key="hibernate.connection.autocommit">true</prop>
            </props>
        </property>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager"
          p:sessionFactory-ref="sessionFactory" />

    <aop:config>
        <aop:pointcut id="serviceMethod"
                      expression="execution(* com.os.osframe..*.service..*(..))" />
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" />
            <tx:method name="insert*" />
            <tx:method name="save*" />
            <tx:method name="remove*" />
            <tx:method name="delete*" />
            <tx:method name="update*"/>
            <tx:method name="init*"/>
            <tx:method name="copy*" />
            <tx:method name="*"  read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 启用对事务注解的支持 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 基于EHCache的系统缓存管理器-->

    <!--国际化资源  -->

    <bean id="messageSource"
          class="com.os.osframe.frame.loader.I18nMessageLoader">
        <property name="expression">
            <list>
                <value>classpath*:com/os/osframe/**/i18n/*.properties</value>
            </list>
        </property>
    </bean>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
        <property name="defaultLocale" value="zh_CN"></property>
    </bean>
    <!-- spring 新的缓存配置-->
    <!-- 开启注解缓存 -->
    <cache:annotation-driven />
    <!-- cacheManager工厂类，指定ehcache.xml的位置 -->
    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:com/os/osframe/frame/ehcache.xml"></property>
        <property name="shared" value="true"></property>
    </bean>
    <!-- 声明cacheManager -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="cacheManagerFactory"></property>
    </bean>
</beans>